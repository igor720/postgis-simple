-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell DB driver for PostGIS extention
--   
--   Almost fully rewritten fork of 'haskell-postgis' package of Peter
--   (https:/<i>github.com</i>ewestern/haskell-postgis). Provides a way for
--   direct use of user-defined Haskell data with PostGIS databases.
@package postgis-simple
@version 0.1.0.1


-- | Low level operations on Postgis extention of PostgreSQL Database
module Postgis.Simple.Internal

-- | Type class for valid geometry data
--   
--   geoType function must return valid constant for geometry data
class GeoData a
hasM :: GeoData a => a -> Bool
hasZ :: GeoData a => a -> Bool
geoType :: GeoData a => a -> Word32

-- | Type class which defined base DB operations
class Typeable a => Geometry a
putGeometry :: Geometry a => Putter a
getGeometry :: Geometry a => Get a
type Putter a = a -> Put
type Getter = ReaderT Header Get

-- | Header record
data Header
type SRID = Maybe Int
writeEWKB :: Geometry a => a -> ByteString
readEWKB :: Geometry a => ByteString -> a
makeHeader :: GeoData a => SRID -> a -> Header
putHeader :: GeoData a => SRID -> a -> Put
putMaybe :: Maybe a -> Putter a -> Put
putPoint :: Putter (Double, Double, Maybe Double, Maybe Double)
putChainLen :: Putter Int
getHeader :: Get Header
getHeaderPre :: Get Header
lookGeoType :: Header -> Word32
mkGeom :: Header -> (SRID -> a -> b) -> Getter a -> Get b
skipHeader :: Getter ()
getPoint :: Getter (Double, Double, Maybe Double, Maybe Double)
getChainLen :: Getter Int
pgisPoint :: Word32
pgisLinestring :: Word32
pgisPolygon :: Word32
pgisMultiPoint :: Word32
pgisMultiLinestring :: Word32
pgisMultiPolygon :: Word32
instance GHC.Show.Show Postgis.Simple.Internal.Header
instance GHC.Show.Show Postgis.Simple.Internal.ByteOrder
instance Data.Binary.Class.Binary Postgis.Simple.Internal.ByteOrder
instance Data.Binary.Class.Binary Postgis.Simple.Internal.Header
instance Postgis.Simple.Internal.Hexable Postgis.Simple.Internal.ByteOrder
instance Postgis.Simple.Internal.Hexable GHC.Word.Word32
instance Postgis.Simple.Internal.Hexable GHC.Word.Word64


-- | Default types for Postgis data
module Postgis.Simple.Types.Default

-- | Data type for points
data PointND
Point2D :: {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> PointND
Point3DZ :: {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> PointND
Point3DM :: {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> PointND
Point4D :: {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> {-# UNPACK #-} !Double -> PointND

-- | Data type for linestrings
data LineString
LineString :: Chain -> LineString

-- | Data type for polygons
data Polygon
Polygon :: (Vector Chain) -> Polygon

-- | Data type for multi points
data MultiPoint
MultiPoint :: (Vector PointND) -> MultiPoint

-- | Data type for multi linestrings
data MultiLineString
MultiLineString :: (Vector LineString) -> MultiLineString

-- | Data type for multi polygons
data MultiPolygon
MultiPolygon :: (Vector Polygon) -> MultiPolygon

-- | Data type for fully specified geometry objects
data GObject
GPoint :: SRID -> PointND -> GObject
GLineString :: SRID -> LineString -> GObject
GPolygon :: SRID -> Polygon -> GObject
GMultiPoint :: SRID -> MultiPoint -> GObject
GMultiLineString :: SRID -> MultiLineString -> GObject
GMultiPolygon :: SRID -> MultiPolygon -> GObject

-- | Data type for point chain of Linestrings and Polygons
type Chain = Vector PointND
instance GHC.Classes.Eq Postgis.Simple.Types.Default.GObject
instance GHC.Show.Show Postgis.Simple.Types.Default.GObject
instance GHC.Classes.Eq Postgis.Simple.Types.Default.MultiPolygon
instance GHC.Show.Show Postgis.Simple.Types.Default.MultiPolygon
instance GHC.Classes.Eq Postgis.Simple.Types.Default.MultiLineString
instance GHC.Show.Show Postgis.Simple.Types.Default.MultiLineString
instance GHC.Classes.Eq Postgis.Simple.Types.Default.MultiPoint
instance GHC.Show.Show Postgis.Simple.Types.Default.MultiPoint
instance GHC.Classes.Eq Postgis.Simple.Types.Default.Polygon
instance GHC.Show.Show Postgis.Simple.Types.Default.Polygon
instance GHC.Classes.Eq Postgis.Simple.Types.Default.LineString
instance GHC.Show.Show Postgis.Simple.Types.Default.LineString
instance GHC.Classes.Eq Postgis.Simple.Types.Default.PointND
instance GHC.Show.Show Postgis.Simple.Types.Default.PointND
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.PointND
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.LineString
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.Polygon
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.MultiPoint
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.MultiLineString
instance Postgis.Simple.Internal.GeoData Postgis.Simple.Types.Default.MultiPolygon
instance Postgis.Simple.Internal.Geometry Postgis.Simple.Types.Default.GObject
instance Database.PostgreSQL.Simple.ToField.ToField Postgis.Simple.Types.Default.GObject
instance Database.PostgreSQL.Simple.FromField.FromField Postgis.Simple.Types.Default.GObject


-- | Reexports <a>Postgis.Simple.Internal</a> and
--   <a>Postgis.Simple.Field.Default</a> modules.
--   
--   Except for the import of this module and
--   <a>Database.PostgreSQL.Simple</a> you may also import
--   <a>Postgis.Simple.Types.Default</a> and plainly use its types.
--   
--   If you have some beloved old legacy data types and want to escape type
--   convertions. Then you should manualy create instances of GeoData and
--   Geometry type classes similar to those defined in
--   <a>Postgis.Simple.Types.Default</a>. Here we will give an example of
--   declarations that can cause your data to work with Postgis. Let's
--   assume you have polygons in nested lists and your points are
--   latitude-longitude pairs.
--   
--   <pre>
--   type MySRID = Int
--   data LatLon = LatLon Double Double deriving Show
--   newtype Poly = Poly [[LatLon]] deriving Show -- just use newtype
--   </pre>
--   
--   Then we will make additional declarations.
--   
--   <pre>
--   import Control.Monad
--   import Database.PostgreSQL.Simple.ToField
--   import Database.PostgreSQL.Simple.FromField
--   
--   data MyGPoly = MyGPoly (Maybe MySRID) Poly deriving Show
--   
--   instance GeoData Poly where
--     hasM (Poly _) = False
--     hasZ (Poly _) = False
--     geoType _ = pgisPolygon
--   
--   instance Geometry MyGPoly where
--       putGeometry (MyGPoly s pg@(Poly rs)) = do
--           putHeader s pg
--           putChainLen $ length rs
--           mapM_ putChain rs
--       getGeometry = do
--           h &lt;- getHeaderPre
--           let geo gt
--                 | gt==pgisPolygon         = mkGeom h MyGPoly getPolygon 
--                 | otherwise = error $ "geometry type is not yet implemented: "++show gt
--           geo $ lookGeoType h
--   
--   putChain :: Putter [LatLon]
--   putChain r = do
--       putChainLen $ length r
--       mapM_ (\(LatLon y x) -&gt; putPoint (x, y, Nothing, Nothing)) r
--   
--   getChain :: Getter [LatLon]
--   getChain = getChainLen &gt;&gt;= (`replicateM` getPoint) &gt;&gt;= mapM (\(x, y, _, _) -&gt; return $ LatLon y x) 
--   
--   getPolygon :: Getter Poly 
--   getPolygon = skipHeader &gt;&gt; Poly &lt;$&gt; (getChainLen &gt;&gt;= (`replicateM` getChain))
--   
--   instance ToField MyGPoly where
--       toField = toFieldDefault
--   
--   instance FromField MyGPoly where
--       fromField = fromFieldDefault
--   </pre>
--   
--   Your app module may look like following.
--   
--   <pre>
--   import Database.PostgreSQL.Simple
--   import Postgis.Simple
--   
--   {..above declarations here or in a separate module..}
--   
--   main :: IO ()
--   main = do
--       conn &lt;- connectPostgreSQL "..."
--       let srid = Just 4326
--           ring = [LatLon 1 2, LatLon 1.5 2.5, LatLon 2.5 3, LatLon 1 2]
--           pl = MyGPoly srid (Poly [ring, ring])
--       _ &lt;- execute conn "INSERT INTO t1 (name, geom) VALUES (?, ?)" ("polygon"::String, pl)
--       a &lt;- query_ conn "select * from t1 LIMIT 1"     :: IO [(String, MyGPoly)]
--       print a
--   </pre>
module Postgis.Simple

-- | Default toField function
toFieldDefault :: Geometry a => a -> Action

-- | Default fromField function
fromFieldDefault :: Geometry a => FieldParser a
